#!usr/bin/env python
import threading
import numpy as np
from hippocampus_msgs import msg

import rospy
from hippocampus_common.node import Node
from std_msgs.msg import Float64MultiArray


class SetpointNode(Node):
    def __init__(self, name):
        super().__init__(name=name)
        self.number_vehicles = self.get_param("~number_vehicles")
        self.number_joints = self.number_vehicles - 1
        self.setpoint_pub = rospy.Publisher("state_setpoints",
                                            Float64MultiArray,
                                            queue_size=1)

    def run(self):

        while not rospy.is_shutdown():

            self.pos_des = np.array([2, 0.3, -0.5]).reshape(-1, 1)
            self.quat_des = np.array([1, 0, 0, 0]).reshape(-1, 1)
            self.vel_des = np.zeros((6, 1))

            # joint states:
            self.joint_state_des = np.zeros((self.number_joints * 2, 1))

            if self.number_joints == 1:
                self.joint_state_des = np.radians([0, 0]).reshape(-1, 1)
                # print(self.joint_state_des)

            if self.number_joints == 2:
                self.joint_state_des = np.radians([0, 0, 0, 0]).reshape(-1, 1)

            msg = Float64MultiArray()
            msg.data = np.concatenate((self.pos_des, self.quat_des,
                                       self.vel_des, self.joint_state_des))
            self.setpoint_pub.publish(msg)

            rospy.Rate(30.0).sleep()


def main():
    node = SetpointNode("state_setpoint_node")
    node.run()


if __name__ == "__main__":
    main()
