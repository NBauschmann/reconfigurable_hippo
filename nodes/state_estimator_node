#!usr/bin/env python
from logging import NOTSET
import threading
import numpy as np
import rospy
from hippocampus_common.node import Node
from sensor_msgs.msg import JointState
from nav_msgs.msg import Odometry
from geometry_msgs.msg import TwistStamped
from std_msgs.msg import Float64MultiArray

# TODO: parameter for joint axis? Currently assuming z-axis

# states: x = []


class StateEstimatorNode(Node):
    def __init__(self, name):
        super().__init__(name=name)
        self.data_lock = threading.RLock()
        self.number_vehicles = self.get_param("~number_vehicles")

        self.uuv00_pose = None
        self.uuv00_twist = None
        self.joint_states = np.zeros(((self.number_vehicles - 1) * 2, 1))

        self.state_pub = rospy.Publisher("multi_hippo/state",
                                         Float64MultiArray,
                                         queue_size=1)

        self.joint_sub = rospy.Subscriber("joint_states",
                                          JointState,
                                          self.on_joint_state,
                                          queue_size=1)
        self.uuv00_pose_sub = rospy.Subscriber("/uuv00/ground_truth/state",
                                               Odometry,
                                               self.on_pose,
                                               queue_size=1)
        self.uuv00_twist_sub = rospy.Subscriber(
            "/uuv00/ground_truth/twist_body_frame",
            TwistStamped,
            self.on_twist,
            queue_size=1)

    def on_pose(self, odom_msg: Odometry):
        with self.data_lock:
            self.uuv00_pose = np.array([
                odom_msg.pose.pose.position.x, odom_msg.pose.pose.position.y,
                odom_msg.pose.pose.position.z, odom_msg.pose.pose.orientation.w,
                odom_msg.pose.pose.orientation.x,
                odom_msg.pose.pose.orientation.y,
                odom_msg.pose.pose.orientation.z
            ]).reshape(-1, 1)

    def on_twist(self, twist_msg: TwistStamped):
        with self.data_lock:
            self.uuv00_twist = np.array([
                twist_msg.twist.linear.x, twist_msg.twist.linear.y,
                twist_msg.twist.linear.z, twist_msg.twist.angular.x,
                twist_msg.twist.angular.y, twist_msg.twist.angular.z
            ]).reshape(-1, 1)

    def on_joint_state(self, joint_msg: JointState):
        with self.data_lock:

            for i in range(len(joint_msg.position)):
                # assuming correct order of joints
                self.joint_states[(i * 2, 0)] = joint_msg.position[i]
                self.joint_states[(i * 2 + 1, 0)] = joint_msg.velocity[i]


            if not self.uuv00_pose is None and not self.uuv00_twist is None:
                state_vector = np.concatenate(
                    (self.uuv00_pose, self.uuv00_twist, self.joint_states), axis=0)
                
                msg = Float64MultiArray()

                msg.data = state_vector

                self.state_pub.publish(msg)


def main():
    node = StateEstimatorNode("state_estimator")
    node.run()


if __name__ == "__main__":
    main()
